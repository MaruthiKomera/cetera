package com.cetera.exceptions;

import org.springframework.http.HttpStatus;

import java.util.HashSet;
import java.util.Set;

/**
 * Created by danni on 3/22/16.
 */
public enum PfmExceptionCode {
    /**
     * generic exception
     */
    GENERIC("Unknown Issue", HttpStatus.INTERNAL_SERVER_ERROR),
    
    /**
     * exceptions for session
     */
    SESSION_EXPIRED("SESSION_EXPIRED", HttpStatus.UNAUTHORIZED),
    SESSION_INVALID("SESSION_INVALID", HttpStatus.UNAUTHORIZED),
    SESSION_MISSING_ID("SESSION_MISSING_ID", HttpStatus.UNAUTHORIZED),
    
    /**
     * exceptions for person
     */
    PERSON_NULL("PERSON_NULL", HttpStatus.BAD_REQUEST),
    PERSON_MISSING_FIRSTNAME("PERSON_MISSING_FIRSTNAME", HttpStatus.BAD_REQUEST),
    PERSON_MISSING_LASTNAME("PERSON_MISSING_LASTNAME", HttpStatus.BAD_REQUEST),
    PERSON_MISSING_EMAIL("PERSON_MISSING_EMAIL", HttpStatus.BAD_REQUEST),
    PERSON_MISSING_ID("PERSON_MISSING_ID", HttpStatus.BAD_REQUEST),
    PERSON_INVALID_ID("PERSON_INVALID_ID", HttpStatus.BAD_REQUEST),
    PERSON_INVALID_EMAIL("PERSON_INVALID_EMAIL", HttpStatus.BAD_REQUEST),
    PERSON_INVALID_FIRSTNAME("PERSON_INVALID_FIRSTNAME", HttpStatus.BAD_REQUEST),
    PERSON_INVALID_LASTNAME("PERSON_INVALID_LASTNAME", HttpStatus.BAD_REQUEST),
    PERSON_MISSING_CONSULTANT_EMAIL("PERSON_MISSING_CONSULTANT_EMAIL", HttpStatus.BAD_REQUEST),
    
    /**
     * exceptions for revenue
     */
    REVENUE_MISSING_REVENUE("REVENUE_MISSING_REVENUE", HttpStatus.BAD_REQUEST),
    REVENUE_MISSING_QUALIFIED_PERC("REVENUE_MISSING_QUALIFIED_PERC", HttpStatus.BAD_REQUEST),
    REVENUE_MISSING_NONRECUR_PERC("REVENUE_MISSING_NONRECUR_PERC", HttpStatus.BAD_REQUEST),
    REVENUE_NULL("REVENUE_NULL", HttpStatus.BAD_REQUEST),

    REVENUE_WRONG_REVENUE("REVENUE_WRONG_REVENUE", HttpStatus.BAD_REQUEST),
    REVENUE_WRONG_QUAL_PERC("REVENUE_WRONG_QUAL_PERC", HttpStatus.BAD_REQUEST),
    REVENUE_WRONG_NON_RECUR("REVENUE_WRONG_NON_RECUR", HttpStatus.BAD_REQUEST),
    /**
     * exceptions for payload
     */
    PAYLOAD_EXPIRED("PAYLOAD_EXPIRED", HttpStatus.BAD_REQUEST),

    /**
     * exceptions for questionnaire
     */
    QUESTIONNAIRE_WRONG_ID("QUESTIONNAIRE_WRONG_ID", HttpStatus.BAD_REQUEST),
    QUESTIONNAIRE_API_ERROR("QUESTIONNAIRE_API_ERROR", HttpStatus.INTERNAL_SERVER_ERROR),
    QUESTIONNAIRE_WRONG_ANSWER_COUNT("QUESTIONNAIRE_WRONG_ANSWER_COUNT", HttpStatus.BAD_REQUEST),
    QUESTIONNAIRE_WRONG_ANSWER_TYPE("QUESTIONNAIRE_WRONG_ANSWER_TYPE", HttpStatus.BAD_REQUEST),

    SEEDDATA_API_ERROR("SEEDDATA_RESOURCES_API_ERROR", HttpStatus.INTERNAL_SERVER_ERROR),

    PROPERTY_MISSING("PROPERTY_MISSING", HttpStatus.INTERNAL_SERVER_ERROR),
    CIPHER_ERROR("CIPHER_ERROR", HttpStatus.INTERNAL_SERVER_ERROR),
    HMAC_SHA256_HASH_ERROR("HMAC_SHA256_HASH_ERROR", HttpStatus.INTERNAL_SERVER_ERROR),

    /**
     * exceptions for performances
     */
    PERFORMANCES_API_ERROR("PERFORMANCES_API_ERROR", HttpStatus.INTERNAL_SERVER_ERROR),
    RESOURCE_API_ERROR("RESOURCE_API_ERROR", HttpStatus.INTERNAL_SERVER_ERROR),
    RESOURCE_INVALID_ID("RESOURCE_INVALID_ID",HttpStatus.BAD_REQUEST),
    RESOURCE_WRONG_TYPE("RESOURCE_WRONG_TYPE", HttpStatus.BAD_REQUEST),
    RESOURCE_WRONG_SSO("RESOURCE_WRONG_SSO", HttpStatus.BAD_REQUEST),

    SSO_RESOURCES_UNAVAILABLE("SSO_RESOURCES_UNAVAILABLE", HttpStatus.BAD_REQUEST),

    /**
     * exceptions for payload
     */
    PAYLOAD_MISSING_GDC("PAYLOAD_MISSING_GDC", HttpStatus.BAD_REQUEST),
    PAYLOAD_MISSING_PERQUAL("PAYLOAD_MISSING_PERQUAL", HttpStatus.BAD_REQUEST),
    PAYLOAD_MISSING_PERQUAL_NONRECUR("PAYLOAD_MISSING_PERQUAL_NONRECUR", HttpStatus.BAD_REQUEST),
    PAYLOAD_MISSING_UUID("PAYLOAD_MISSING_UUID", HttpStatus.BAD_REQUEST),
    PAYLOAD_MISSING_EMAIL("PAYLOAD_MISSING_EMAIL", HttpStatus.BAD_REQUEST),
    PAYLOAD_MISSING_FIRSTNAME("PAYLOAD_MISSING_FIRSTNAME", HttpStatus.BAD_REQUEST),
    PAYLOAD_MISSING_LASTNAME("PAYLOAD_MISSING_LASTNAME", HttpStatus.BAD_REQUEST),
    PAYLOAD_MISSING_TIMESTAMP("PAYLOAD_MISSING_TIMESTAMP", HttpStatus.BAD_REQUEST),
    PAYLOAD_MISSING_BD("PAYLOAD_MISSING_BD", HttpStatus.BAD_REQUEST),
    PAYLOAD_INVALID_BD("PAYLOAD_INVALID_BD", HttpStatus.BAD_REQUEST),

    SERVICE_PERMISSION_DENIED("SERVICE_PERMISSION_DENIED", HttpStatus.BAD_REQUEST),

    /**
     * exceptions for Email
     */
    EMAIL_TEMPLATE_VARIABLE_VALIDATION_ERROR("EMAIL_TEMPLATE_VARIABLE_VALIDATION_ERROR",HttpStatus.INTERNAL_SERVER_ERROR),
    EMAIL_RECIPIENT_NULL("EMAIL_RECIPIENT_NULL",HttpStatus.INTERNAL_SERVER_ERROR),
    EMAIL_SUBJECT_NULL("EMAIL_SUBJECT_NULL",HttpStatus.INTERNAL_SERVER_ERROR),
    EMAIL_BODY_NULL("EMAIL_BODY_NULL",HttpStatus.INTERNAL_SERVER_ERROR),
    EMAIL_SEND_ERROR("EMAIL_SEND_ERROR",HttpStatus.INTERNAL_SERVER_ERROR),
    EMAIL_ADDRESS_FORMAT_ERROR("EMAIL_ADDRESS_FORMAT_ERROR",HttpStatus.INTERNAL_SERVER_ERROR),
    EMAIL_FREEMARKER_EXCEPTION("EMAIL_FREEMARKER_EXCEPTION",HttpStatus.INTERNAL_SERVER_ERROR),
    
    
    ANSWERS_NULL("ANSWERS_NULL", HttpStatus.BAD_REQUEST),
    
    IQUANTIFY_NULL("IQUANTIFY_NULL",HttpStatus.INTERNAL_SERVER_ERROR),

    FILE_PROCESSING_ERROR("FILE_PROCESSING_ERROR", HttpStatus.BAD_REQUEST),

    BROKER_DEALER_INVALID_ID("BROKER_DEALER_INVALID_ID", HttpStatus.BAD_REQUEST),

    SEED_DATA_INVALID_VERSION("SEED_DATA_INVALID_VERSION", HttpStatus.INTERNAL_SERVER_ERROR),
    /**
     * exceptions for service api keys
     */
    SERVICE_API_KEY_INVALID("SERVICE_API_KEY_INVALID", HttpStatus.BAD_REQUEST),
    JSON_PROCESSING_EXCEPTION("JSON_PROCESSING_EXCEPTION", HttpStatus.INTERNAL_SERVER_ERROR);

    private static final Set<String> VALUE_SET = new HashSet<String>() {
        {
            for (PfmExceptionCode type : values()) {
                add(type.payload);
            }
        }
    };
    private String payload;
    private HttpStatus httpStatus;

    PfmExceptionCode(String payload, HttpStatus httpStatus) {
        this.payload = payload;
        this.httpStatus = httpStatus;
    }

    public static final Set<String> valuesSet() {
        return VALUE_SET;
    }

    public HttpStatus getHttpStatus() {
        return httpStatus;
    }

    public String valueOf() {
        return payload;
    }

}